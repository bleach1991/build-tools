name: download dl

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * 1

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq install lftp
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir


    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH lede
        ln -sf /workdir/lede $GITHUB_WORKSPACE/lede


    - name: Load feeds
      run: |
        cd lede/
        ./scripts/feeds update -a
        ./scripts/feeds install -a


    - name: download dl
      run: |
        cd lede/
        
        # x86_64
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_x86=y
        CONFIG_TARGET_x86_64=y
        CONFIG_TARGET_x86_64_DEVICE_generic=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s

        # rockchip
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_rockchip=y
        CONFIG_TARGET_rockchip_armv8=y
        CONFIG_TARGET_MULTI_PROFILE=y
        CONFIG_TARGET_ALL_PROFILES=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s

        # bcm rpi-5
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_bcm27xx=y
        CONFIG_TARGET_bcm27xx_bcm2712=y
        CONFIG_TARGET_bcm27xx_bcm2712_DEVICE_rpi-5=y
        
        CONFIG_PACKAGE_autocore-arm=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s

        # bcm rpi-4
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_bcm27xx=y
        CONFIG_TARGET_bcm27xx_bcm2711=y
        CONFIG_TARGET_bcm27xx_bcm2711_DEVICE_rpi-4=y
        
        CONFIG_PACKAGE_autocore-arm=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s

        # bcm k3
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_bcm53xx=y
        CONFIG_TARGET_bcm53xx_generic=y
        CONFIG_TARGET_bcm53xx_generic_DEVICE_phicomm_k3=y
        
        CONFIG_PACKAGE_autocore-arm=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s

        # mtk mt798x
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_MULTI_PROFILE=y
        CONFIG_TARGET_ALL_PROFILES=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s
        
        # mtk mt7621
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_ramips=y
        CONFIG_TARGET_ramips_mt7621=y
        CONFIG_TARGET_MULTI_PROFILE=y
        CONFIG_TARGET_ALL_PROFILES=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s

        # qca ipq60xx
        rm -rfv .config
        cat >> .config << EOF
        CONFIG_TARGET_qualcommax=y
        CONFIG_TARGET_qualcommax_ipq60xx=y
        CONFIG_TARGET_MULTI_PROFILE=y
        CONFIG_TARGET_ALL_PROFILES=y
        
        CONFIG_PACKAGE_autocore-arm=y
        EOF
        cat .config
        make defconfig && cat .config |grep luci-app|egrep -v "CONFIG_DEFAULT"|egrep -v '=y'|awk '{print $2"=y"}' >> .config
        make defconfig && make download -j8 v=s

    - name: check
      run: |
        ls -lh lede/dl
        echo "CURRENT_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV


    - name: Upload dl
      uses: actions/upload-artifact@main
      with:
        name: dl-${{ env.CURRENT_DATE }}
        path: lede/dl


    - name: Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: lede/dl/
        server-dir: /dl/
        timeout: 600000
